<?php

define('PMB_QUESTION_OPEN', 1);
define('PMB_QUESTION_CLOSED', 0);

function pmb_permission() {
  return array(
    'place a bet' => array(
      'title' => t('Place a bet'), 
      'description' => t('Allow users to place a PMB bet.'),
    ),
    'administer pmb questions' => array(
      'title' => t('Administer questions'), 
      'description' => t('Allow admins to alter advanced question elements.'),
    ),
    'alter existing pmb questions' => array(
      'title' => t('Alter existing pmb questions'), 
      'description' => t('Allow users (usually moderators) to alter question elements after creating.'),
    ), 
    'close pmb questions' => array(
      'title' => t('Close pmb questions'), 
      'description' => t('Allow users (usually moderators) to <em>close</em> questions.'),
    ),
  );
}

function pmb_node_delete($node) {
  // Remove bets about deleted nodes for consistency.
  db_delete('pmb_bets')
    ->condition('nid', $node->nid)
    ->execute();
}

function pmb_menu() {
  $items['node/%node/bet'] = array(
    'title' => 'Place a bet',
    'page callback' => 'pmb_bet_add_page',
    'page arguments' => array(1),
    'access callback' => 'pmb_place_bet_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['node/%node/close'] = array(
    'title' => 'Close betting',
    'page callback' => 'pmb_bet_close_page',
    'page arguments' => array(1),
    'access callback' => 'pmb_close_question_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,  
  );

  return $items;
}

function pmb_place_bet_access($node) {
  return user_access('place a bet') && $node->type == 'question' && REQUEST_TIME < $node->field_closing_date['und'][0]['value'];
}

function pmb_close_question_access($node) {
  return user_access('close pmb questions') && $node->type == 'question';
}

/**
 * Implements hook_field_access().
 */
function pmb_field_access($op, $field, $obj_type, $object, $account) {
  // During edits, prevent normal users from changing the outcome options OR the closing date. Those are admin operations. 
  if ($op == 'edit' && ($field['field_name'] == 'field_outcome' || $field['field_name'] == 'field_closing_date')) {
    return user_access('alter existing pmb questions');
  }
  // Nobody can edit the status or actual outcome. It's defaulted to open and changed to closed through the form.
  if ($field['field_name'] == 'field_question_status' || $field['field_name'] == 'field_actual_outcome') {
    return FALSE;
  }
}


/**
 * Page callback for a form to add bets.
 */
function pmb_bet_add_page($node, $delta = NULL) {
  drupal_set_title(t('Bet on %title', array('%title' => $node->title)), PASS_THROUGH);
  if (empty($node->field_outcome['und'])) {
    return t('There are no outcomes associated with this question, please contact the question author and have them add outcomes.'); 
  }
  if ($node->field_question_status['und'][0]['value'] == PMB_QUESTION_CLOSED) {
    return t("You cannot bet on a closed question.");
  }
  
  return drupal_get_form('pmb_bet_add_form', $node, $delta);
}

function pmb_bet_add_form($form, &$form_state, $node, $default_delta = NULL) {
  global $user;
  $points = userpoints_get_current_points($user->uid, 'all');
  if ($points <= 0) {
    $disabled  = TRUE; 
    drupal_set_message(t("You have %points points so you cannot bet.", array('%points' => $points)), 'warning', TRUE);
  }
  else {
    $disabled = FALSE;
    // TODOlow: make this help inline with the form.
    // TODO: better help text.
    drupal_set_message(t("You have %points points. Blah blah blah advice on what this all means.", array('%points' => $points)));
  }  
  
  $form['pmb_bet_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount to bet'),
    '#default_value' => 5,
    '#disabled' => $disabled,
  );
  
  $outcomes = $node->field_outcome['und'];
  foreach ($outcomes as $delta => $outcome) {
    $options[$delta] = $outcome['safe_value'];
  }

  $form['pmb_bet_outcome'] = array(
    '#title' => t('Selected outcome'),
    '#type' => 'radios',
    '#options' => $options,
    '#disabled' => $disabled,
  );
  if (isset($options[$default_delta])) {
    $form['pmb_bet_outcome']['#default_value'] = $default_delta;
  }
  
  $form['pmb_bet_nid'] = array('#type' => 'value', '#value' => $node->nid);
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Bet'),
    '#disabled' => $disabled,
  );
  return $form;
}

function pmb_bet_add_form_validate($form, &$form_state) {
  // We don't confirm they have money: we did that before showing a form and at this point that can be done more efficiently by just trying to spend money and rolling back if not.
  $bet = $form_state['values']['pmb_bet_amount'];
  if (!is_numeric($bet)) {
    form_set_error('pmb_bet_amount', t('Bets must be numbers.'));
  }
  if ($bet <= 0) {
    form_set_error('pmb_bet_amount', t('Bets must be positive numbers.'));
  }
  // For some reason this validation doesn't work on big numbers, and is_int doesn't either. Whatevs.
  if ($bet != (int)$bet) {
    form_set_error('pmb_bet_amount', t('Bets must be whole numbers (integers).'));
  }
  
  global $user;
  $points = userpoints_get_current_points($user->uid, 'all');
  if ($bet > $points) {
    form_set_error('pmb_bet_amount', t('Dawg, you cannot bet more than you have.'));
  }
  
  
  // Confirm the bet is still open.
  // TODOlow: load just the status and not the whole node.
  $node = node_load($form_state['values']['pmb_bet_nid']);
  if ($node->field_question_status['und'][0]['value'] == PMB_QUESTION_CLOSED) {
    form_set_error('pmb_bet_amount', "This question is closed and so you cannot bet on it.");
  }
}

function pmb_bet_add_form_submit($form, &$form_state) {
  global $user;
  $values = $form_state['values'];
  $node = node_load($values['pmb_bet_nid']);

  // TODOlow: wrap this in a transaction and rollback if it doesn't succeed. see $transaction = db_transaction();
  // TODOlow: move to something other than the form submit.

  // Try to deduct the funds from userpoints with.
  $transaction_points = userpoints_userpointsapi(
    array(
      'points' => -$values['pmb_bet_amount'],
      'moderate' => FALSE,
      'uid' => $user->uid,
      'operation' => 'bet',
      'description' => t('Placed your bet for @amount on @outcome of @title', array('@amount' => $values['pmb_bet_amount'], '@outcome' => $node->field_outcome['und'][$values['pmb_bet_outcome']]['value'], '@title' => $node->title)),
      'entity_type' => 'node',
      'entity_id' => $values['pmb_bet_nid'],
      ));
  if (!empty($transaction_points['status'])) {
    // If the points went through, place their bet.
    db_insert('pmb_bets')
      ->fields(array(
        'uid' => $user->uid,
        'amount' => $values['pmb_bet_amount'],
        'nid' => $values['pmb_bet_nid'],
        'delta' => $values['pmb_bet_outcome'],
        'created' => REQUEST_TIME,
      ))
      ->execute();
    drupal_set_message(t('Placed your bet for %amount on %outcome of %title', array('%amount' => $values['pmb_bet_amount'], '%outcome' => $node->field_outcome['und'][$values['pmb_bet_outcome']]['value'], '%title' => $node->title)));
    // Go back to the page they bet on.
    $uri = entity_uri('node', $node);
    $form_state['redirect'] = url($uri['path'], $uri['options']);
  }
  else {
    drupal_set_message(t('Failed to placed your bet for %amount on %outcome of %title', array('%amount' => $values['pmb_bet_amount'], '%outcome' => $node->field_outcome['und'][$values['pmb_bet_outcome']]['value'], '%title' => $node->title)), 'error');
  }
}

function pmb_bet_close_page($node, $delta = NULL) {
  if ($node->type != 'question') {
    return drupal_not_found();
  }
  if (empty($node->field_outcome['und'])) {
    return t('There are no outcomes associated with this question, please contact the question author and have them add outcomes.'); 
  }
  drupal_set_title(t('Close the question: %title', array('%title' => $node->title)), PASS_THROUGH);

  if ($node->field_question_status['und'][0]['value'] == PMB_QUESTION_CLOSED) {
    return t("This question is already closed and cannot be re-closed. To re-close a question it has to be opened first (the ability to re-open a question doesn't exist yet.)");
  }
  
  // Warn them if they appear to be closing it "early".
  if (REQUEST_TIME < $node->field_closing_date['und'][0]['value']) {
    drupal_set_message(t('You are closing a question before the scheduled end time. Are you for real?'), 'warning', FALSE);
  }
  
  return drupal_get_form('pmb_bet_close_form', $node, $delta);
}

function pmb_bet_close_form($form, &$form_state, $node, $default_delta = NULL) {
  $outcomes = $node->field_outcome['und'];
  foreach ($outcomes as $delta => $outcome) {
    $options[$delta] = $outcome['safe_value'];
  }
  
  $form['pmb_bet_nid'] = array('#type' => 'value', '#value' => $node->nid);
  
  $form['pmb_bet_outcome'] = array(
    '#title' => t('Actual outcome'),
    '#type' => 'radios',
    '#options' => $options,
    '#description' => t('Choose the outcome that has actually happened. Closing the question prevents new betting and distributes funds to people who bet on the outcome you select here.'),
  );

  if (isset($options[$default_delta])) {
    $form['pmb_bet_outcome']['#default_value'] = $default_delta;
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Close the question'),
  );
  return $form;  
}

function pmb_bet_close_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  
  $status = pmb_bet_close_bet($values['pmb_bet_nid'], $values['pmb_bet_outcome']);
  // A FALSE status means it failed - let them know the problem.
  if ($status['status'] == FALSE) {
    drupal_set_message($status['message']);
  }
}

function pmb_bet_close_bet($bet_nid, $actual_outcome_delta) {
  // Load the node, set the status and actually close it.
  $node = node_load($bet_nid);
  if (!isset($node->field_outcome['und'][$actual_outcome_delta])) {
    return array('status' => FALSE, 'message' => t('This question cannot be closed with that outcome.'));
  }
  if ($node->field_question_status['und'][0]['value'] == PMB_QUESTION_CLOSED) {
    return array('status' => FALSE, 'message' => t('This question is already closed and cannot be closed again.'));
  }
  // TODOlow: more validation.
  
  // Close the question, assign the actual outcome.
  $node->field_question_status['und'][0]['value'] = PMB_QUESTION_CLOSED;
  $node->field_actual_outcome['und'][0]['value'] = $actual_outcome_delta;
  node_save($node);
  
  // Distribute points associated with the close.
  $distribute_status = pmb_distribute_closing_points($node);
  drupal_set_message(t('Distributed %total to %count bettors.', array('%total' => $distribute_status['total_to_distribute'], '%count' => $distribute_status['count'])));

  // Go back to the page they bet on.
  $uri = entity_uri('node', $node);
  $form_state['redirect'] = url($uri['path'], $uri['options']);
  
  // TODOlow: better detection that things actually succeeded.
  return array('status' => TRUE, 'message' => t('Question closed!'));
}

function pmb_distribute_closing_points($node) {
  // TODOlow: this could be a long running operation. Consider doing this via drush/batch.
  
  // Get a count of all points bet on this node.
  $total_to_distribute = db_query("SELECT SUM(amount) FROM {pmb_bets} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();

  // Get users and the percent of those points that they are owed.
  $actual_outcome_delta = $node->field_actual_outcome['und'][0]['value'];
  $total_on_actual_outcome = db_query("SELECT SUM(amount) FROM {pmb_bets} WHERE nid = :nid AND delta = :delta", array(':nid' => $node->nid, ':delta' => $actual_outcome_delta))->fetchField();
  
  $percents_and_recipients = db_query("SELECT SUM(amount) as total_bet, uid FROM {pmb_bets} WHERE nid = :nid AND delta = :delta GROUP BY uid", array(':nid' => $node->nid, ':delta' => $actual_outcome_delta));
  // TODOlow: reconsider what we do with fractional amounts? Inflation? Deflation? Round for now.
  
  $count = 0;
  // Grant them the points.
  foreach ($percents_and_recipients as $recipient) {
    $count++;
    $transaction_points = userpoints_userpointsapi(
      array(
        'points' => round($total_to_distribute * ($recipient->total_bet / $total_on_actual_outcome), 0),
        'moderate' => FALSE,
        'uid' => $recipient->uid,
        'operation' => 'question close',
        'description' => t('You won @winnings by betting @wager on @outcome of @title', array(
            '@winnings' => $total_to_distribute * ($recipient->total_bet / $total_on_actual_outcome),
            '@wager' => $recipient->total_bet,
            '@outcome' => $actual_outcome_delta,
            '@title' => $node->title)),
        'entity_type' => 'node',
        'entity_id' => $node->nid,
        ));
  }
  return array('total_to_distribute' => $total_to_distribute, 'count' => $count);
}

function pmb_get_odds_for_node($node) {
  $outcomes = array();
  $result = db_query('SELECT SUM(amount) summed, delta FROM {pmb_bets} WHERE nid = :nid GROUP BY delta', array(':nid' => $node->nid));
  $total = db_query('SELECT SUM(amount) summed FROM {pmb_bets} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
  foreach ($result as $record) {
    $outcomes[$record->delta] = array('to_win' => $total/max($record->summed, 1), 'percents' => round(($record->summed/$total), 3)*100);
  }
  return $outcomes;  
}

function pmb_node_view($node, $view_mode) {
  if ($node->type == 'question') {
    $outcomes = pmb_get_odds_for_node($node);
    $total = db_query('SELECT SUM(amount) summed FROM {pmb_bets} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
    $delta = 0;
    while (isset($node->content['field_outcome'][$delta])) {
      $odds = empty($outcomes[$delta]['percents']) ? 0 : $outcomes[$delta]['percents'];
      $to_win = empty($outcomes[$delta]['to_win']) ? $total : round($outcomes[$delta]['to_win'], 2) -1;
      $new_markup = t('@outcome: @odds%. <a href="!place_bet">Bet $1 to win $@win</a>', array(
        '@outcome' => $node->content['field_outcome'][$delta]['#markup'],
        '@odds' => $odds,
        '!place_bet' => url('node/' . $node->nid . '/bet/' . $delta),
        '@win' => $to_win, 2,
      ));
      $node->content['field_outcome'][$delta]['#markup'] = $new_markup;
      $delta++;
    }
  }
}
function pmb_block_info() {
  $blocks['pmb_your_bets'] = array(
    'info' => t("PMB: User's bets"),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

function pmb_block_view($delta = '') {
  $data = array();
  switch ($delta) {
    case 'pmb_your_bets':
      $bets = pmb_user_bets();
      if (!empty($bets)) {
        $data['subject'] = t('Your bets');
        $data['content'] = $bets;
      }
      break;
  }
  return $data;
}

function pmb_user_bets($uid = NULL, $nid = NULL) {
  if (empty($uid)) {
    global $user;
    $uid = $user->uid;
  }
  if (empty($nid)) {
    $nid = arg(1);

    if (empty($nid)) {
      return;
    }
    $node = node_load(arg(1));

    if (empty($node->nid) || $node->type != 'question') {
      return;
    }
  }
    
  $items = array();
  $bets = db_query("SELECT sum(amount) as sum_amount, delta FROM {pmb_bets} WHERE nid = :nid AND uid = :uid GROUP BY delta ORDER BY created DESC", array(':nid' => $nid, ':uid' => $uid));
  foreach ($bets as $bet) {
    if ($bet->sum_amount) {
      $items[] = t('%amount on %outcome', array('%amount' => $bet->sum_amount, '%outcome' => pmb_delta_to_label($nid, $bet->delta)));
    }
  }
  if (empty($items)) {
    if (user_access('place a bet')) {
      return l(t('No bets yet, place a bet'), 'node/' . $node->nid . '/bet');
    }
    else {
      return;
    }
  }
  else {
    return theme('item_list', array('items' => $items));
  }
}

function pmb_delta_to_label($nid, $delta) {
  $node = node_load($nid);
  return $node->field_outcome['und'][$delta]['safe_value'];
}


/**
Questions:
* Should the site be taken offline during closing of questions? It's a lot of activity...
* Should closing a question be separated from distributing the funds for that question? 
* Should moderators close a question, comment about a proposed close, then actually close?
* 
*/
// TODOlow: take an optional percent of the closing to the house (most exchanges make their profit this way).
// TODOlow: let a user set their default bet size.
// TODOlow: allow user with some admin perm to bet on behalf of others.
// TODOlow: Create a block to show bets of all players (anonymously? with names?).
// TODO: check for node access before allowing a bet/close on a node.
// TODO: before there are bets the ratios are wrong